{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { combineLatest, filter, map } from 'rxjs';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/boards.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/board.service\";\nimport * as i4 from \"src/app/shared/services/socket.service\";\nimport * as i5 from \"../../../shared/services/columns.service\";\nimport * as i6 from \"@angular/common\";\n\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelement(1, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class BoardComponent {\n  constructor(boardsService, route, router, boardService, socketService, columnsService) {\n    this.boardsService = boardsService;\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.socketService = socketService;\n    this.columnsService = columnsService;\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([this.boardService.board$.pipe(filter(Boolean)), this.boardService.columns$]).pipe(map(([board, columns]) => ({\n      board,\n      columns\n    })));\n  }\n\n  ngOnInit() {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, {\n      boardId: this.boardId\n    });\n    this.fetchData();\n    this.initializeListeners();\n  }\n\n  initializeListeners() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    });\n  }\n\n  fetchData() {\n    this.boardsService.getBoard(this.boardId).subscribe(board => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe(columns => {\n      this.boardService.setColumns(columns);\n    });\n  }\n\n}\n\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.BoardsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.BoardService), i0.ɵɵdirectiveInject(i4.SocketService), i0.ɵɵdirectiveInject(i5.ColumnsService));\n};\n\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"board\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"board\", 4, \"ngIf\"], [1, \"board\"], [1, \"board-header-container\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-topbar\");\n      i0.ɵɵtemplate(1, BoardComponent_div_1_Template, 2, 0, \"div\", 0);\n      i0.ɵɵpipe(2, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx.data$));\n    }\n  },\n  dependencies: [i6.NgIf, i6.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAyBA,eAAzB,QAAwD,iBAAxD;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,GAAhC,QAAuD,MAAvD;AAKA,SAASC,gBAAT,QAAiC,wCAAjC;;;;;;;;;;;ICLAC;IACEA;IAGFA;;;;ADSA,OAAM,MAAOC,cAAP,CAAqB;EAOzBC,YACUC,aADV,EAEUC,KAFV,EAGUC,MAHV,EAIUC,YAJV,EAKUC,aALV,EAMUC,cANV,EAMwC;IAL9B;IACA;IACA;IACA;IACA;IACA;IAER,MAAMC,OAAO,GAAG,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,SAAjC,CAAhB;;IAEA,IAAI,CAACH,OAAL,EAAc;MACZ,MAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;IACD;;IAED,KAAKJ,OAAL,GAAeA,OAAf;IACA,KAAKK,KAAL,GAAalB,aAAa,CAAC,CACzB,KAAKU,YAAL,CAAkBS,MAAlB,CAAyBC,IAAzB,CAA8BnB,MAAM,CAACoB,OAAD,CAApC,CADyB,EAEzB,KAAKX,YAAL,CAAkBY,QAFO,CAAD,CAAb,CAGVF,IAHU,CAGLlB,GAAG,CAAC,CAAC,CAACqB,KAAD,EAAQC,OAAR,CAAD,MAAuB;MACjCD,KADiC;MAEjCC;IAFiC,CAAvB,CAAD,CAHE,CAAb;EAMD;;EAEDC,QAAQ;IACN,KAAKd,aAAL,CAAmBe,IAAnB,CAAwBvB,gBAAgB,CAACwB,UAAzC,EAAqD;MACnDd,OAAO,EAAE,KAAKA;IADqC,CAArD;IAGA,KAAKe,SAAL;IACA,KAAKC,mBAAL;EACD;;EAEDA,mBAAmB;IACjB,KAAKpB,MAAL,CAAYqB,MAAZ,CAAmBC,SAAnB,CAA6BC,KAAK,IAAG;MACnC,IAAIA,KAAK,YAAYjC,eAArB,EAAsC;QACpCkC,OAAO,CAACC,GAAR,CAAY,gBAAZ;QACA,KAAKxB,YAAL,CAAkByB,UAAlB,CAA6B,KAAKtB,OAAlC;MACD;IACF,CALD;EAMD;;EAEDe,SAAS;IACP,KAAKrB,aAAL,CAAmB6B,QAAnB,CAA4B,KAAKvB,OAAjC,EAA0CkB,SAA1C,CAAqDR,KAAD,IAAU;MAC5D,KAAKb,YAAL,CAAkB2B,QAAlB,CAA2Bd,KAA3B;IACD,CAFD;IAGA,KAAKX,cAAL,CAAoB0B,UAApB,CAA+B,KAAKzB,OAApC,EAA6CkB,SAA7C,CAAwDP,OAAD,IAAY;MACjE,KAAKd,YAAL,CAAkB6B,UAAlB,CAA6Bf,OAA7B;IACD,CAFD;EAID;;AAvDwB;;;mBAAdnB,gBAAcD;AAAA;;;QAAdC;EAAcmC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCf3BxC;MAEAA;;;;;MAAoBA;MAAAA","names":["NavigationStart","combineLatest","filter","map","SocketEventsEnum","i0","BoardComponent","constructor","boardsService","route","router","boardService","socketService","columnsService","boardId","snapshot","paramMap","get","Error","data$","board$","pipe","Boolean","columns$","board","columns","ngOnInit","emit","boardsJoin","fetchData","initializeListeners","events","subscribe","event","console","log","leaveBoard","getBoard","setBoard","getColumns","setColumns","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationStart, Router } from '@angular/router';\nimport { combineLatest, filter, map, Observable } from 'rxjs';\nimport { BoardsService } from 'src/app/shared/services/boards.service';\nimport { BoardInterface } from 'src/app/shared/types/board.interface';\nimport { BoardService } from '../../services/board.service';\nimport { SocketService } from 'src/app/shared/services/socket.service';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport { ColumnInterface } from '../../../shared/types/column.interface';\nimport { ColumnsService } from '../../../shared/services/columns.service';\n\n@Component({\n  selector: 'board',\n  templateUrl: './board.component.html',\n})\nexport class BoardComponent implements OnInit {\n  boardId: string;\n  data$: Observable<{ \n    board: BoardInterface, \n    columns: ColumnInterface[] \n  }>;\n\n  constructor(\n    private boardsService: BoardsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private boardService: BoardService,\n    private socketService: SocketService,\n    private columnsService: ColumnsService,\n  ) {\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([\n      this.boardService.board$.pipe(filter(Boolean)),\n      this.boardService.columns$\n    ]).pipe(map(([board, columns]) => ({ \n      board, \n      columns })));\n  }\n\n  ngOnInit(): void {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, { \n      boardId: this.boardId \n    });\n    this.fetchData();\n    this.initializeListeners()\n  }\n\n  initializeListeners(): void {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    })\n  }\n\n  fetchData(): void {\n    this.boardsService.getBoard(this.boardId).subscribe((board) => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe((columns) => {\n      this.boardService.setColumns(columns);\n    })\n\n  }\n\n}","<app-topbar></app-topbar>\n\n<div class=\"board\" *ngIf=\"data$ | async as data\">\n  <div class=\"board-header-container\">\n    \n  </div>\n</div>"]},"metadata":{},"sourceType":"module"}