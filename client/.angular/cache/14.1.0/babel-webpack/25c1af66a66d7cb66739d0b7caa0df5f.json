{"ast":null,"code":"import { map, filter, combineLatest } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/board.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../shared/modules/inlineForm/components/inlineForm/inlineForm.component\";\n\nfunction TaskModalComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"inline-form\", 4);\n    i0.ɵɵlistener(\"handleSubmit\", function TaskModalComponent_div_0_Template_inline_form_handleSubmit_2_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateTaskName($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"img\", 5);\n    i0.ɵɵlistener(\"click\", function TaskModalComponent_div_0_Template_img_click_3_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.goToBoard());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 6)(5, \"div\")(6, \"form\", 7);\n    i0.ɵɵtext(7, \"SELECT COLUMN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 8)(9, \"div\", 9);\n    i0.ɵɵtext(10, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"inline-form\", 10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 11)(13, \"div\", 12);\n    i0.ɵɵtext(14, \"Actions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\")(16, \"div\", 13);\n    i0.ɵɵelement(17, \"img\", 14);\n    i0.ɵɵtext(18, \" Delete \");\n    i0.ɵɵelementEnd()()()()();\n  }\n\n  if (rf & 2) {\n    const data_r1 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"defaultText\", data_r1.task.title)(\"title\", data_r1.task.title);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"defaultText\", data_r1.task.description);\n  }\n}\n\nexport class TaskModalComponent {\n  constructor(route, router, boardService) {\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.classes = 'task-modal';\n    const taskId = this.route.snapshot.paramMap.get('taskId');\n    const boardId = this.route.parent?.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    if (!taskId) {\n      throw new Error('Cant get taskID from url');\n    }\n\n    this.taskId = taskId;\n    this.boardId = boardId;\n    this.task$ = this.boardService.tasks$.pipe(map(tasks => {\n      return tasks.find(task => task.id === this.taskId);\n    }), filter(Boolean));\n    this.data$ = combineLatest([this.task$, this.boardService.columns$]).pipe(map(([task, columns]) => ({\n      task,\n      columns\n    })));\n  }\n\n  goToBoard() {\n    this.router.navigate(['boards', this.boardId]);\n  }\n\n  updateTaskName(taskName) {\n    console.log('updateTaskName', taskName);\n  }\n\n}\n\nTaskModalComponent.ɵfac = function TaskModalComponent_Factory(t) {\n  return new (t || TaskModalComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.BoardService));\n};\n\nTaskModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskModalComponent,\n  selectors: [[\"task-modal\"]],\n  hostVars: 2,\n  hostBindings: function TaskModalComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.classes);\n    }\n  },\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"task-modal-container\", 4, \"ngIf\"], [1, \"task-modal-backdrop\"], [1, \"task-modal-container\"], [1, \"task-modal-header\"], [1, \"task-modal-edit-title-form\", 3, \"defaultText\", \"title\", \"handleSubmit\"], [\"src\", \"/assets/close_icon.svg\", 1, \"task-modal-close\", 3, \"click\"], [1, \"task-modal-body\"], [1, \"column-select-container\"], [1, \"task-modal-description\"], [1, \"task-modal-description-label\"], [\"||\", \"\", 1, \"task-modal-edit-description-form\", 3, \"defaultText\"], [1, \"task-modal-actions\"], [1, \"task-modal-actions-label\"], [1, \"task-modal-actions-action\"], [\"src\", \"/assets/trash.svg\", 1, \"task-modal-actions-icon\"]],\n  template: function TaskModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TaskModalComponent_div_0_Template, 19, 3, \"div\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelement(2, \"div\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.data$));\n    }\n  },\n  dependencies: [i3.NgIf, i4.InlineFormComponent, i3.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAT,EAAyBC,MAAzB,EAAiCC,aAAjC,QAAsD,MAAtD;;;;;;;;;;;ICFAC,+BAAgE,CAAhE,EAAgE,KAAhE,EAAgE,CAAhE,EAAgE,CAAhE,EAAgE,aAAhE,EAAgE,CAAhE;IAMMA;MAAAA;MAAA;MAAA,OAAgBA,6CAAhB;IAAsC,CAAtC;IACCA;IACHA;IAGEA;MAAAA;MAAA;MAAA,OAASA,kCAAT;IAAoB,CAApB;IAHFA;IAMFA,+BAA6B,CAA7B,EAA6B,KAA7B,EAA6B,CAA7B,EAA6B,MAA7B,EAA6B,CAA7B;IAE0CA;IAAaA;IACnDA,+BAAoC,CAApC,EAAoC,KAApC,EAAoC,CAApC;IAC4CA;IAAWA;IACrDA;IAIFA;IAEFA,iCAAgC,EAAhC,EAAgC,KAAhC,EAAgC,EAAhC;IACwCA;IAAOA;IAC7CA,6BAAK,EAAL,EAAK,KAAL,EAAK,EAAL;IAEIA;IACAA;IACFA;;;;;IA3BFA;IAAAA,iDAA+B,OAA/B,EAA+BC,kBAA/B;IAiBID;IAAAA;;;;ADXV,OAAM,MAAOE,kBAAP,CAAyB;EAQ7BC,YAAoBC,KAApB,EAAmDC,MAAnD,EAA2EC,YAA3E,EAAqG;IAAjF;IAA+B;IAAwB;IAPrD,eAAU,YAAV;IAQpB,MAAMC,MAAM,GAAG,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,QAAjC,CAAf;IACA,MAAMC,OAAO,GAAG,KAAKP,KAAL,CAAWQ,MAAX,EAAmBJ,QAAnB,CAA4BC,QAA5B,CAAqCC,GAArC,CAAyC,SAAzC,CAAhB;;IAGA,IAAI,CAACC,OAAL,EAAc;MACZ,MAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;IACD;;IACD,IAAI,CAACN,MAAL,EAAa;MACX,MAAM,IAAIM,KAAJ,CAAU,0BAAV,CAAN;IACD;;IAED,KAAKN,MAAL,GAAcA,MAAd;IACA,KAAKI,OAAL,GAAeA,OAAf;IACA,KAAKG,KAAL,GAAa,KAAKR,YAAL,CAAkBS,MAAlB,CAAyBC,IAAzB,CACXnB,GAAG,CAAEoB,KAAD,IAAU;MACZ,OAAOA,KAAK,CAACC,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAY,KAAKb,MAAtC,CAAP;IACD,CAFE,CADQ,EAIXT,MAAM,CAACuB,OAAD,CAJK,CAAb;IAMA,KAAKC,KAAL,GAAavB,aAAa,CAAC,CAAC,KAAKe,KAAN,EAAa,KAAKR,YAAL,CAAkBiB,QAA/B,CAAD,CAAb,CAAwDP,IAAxD,CACXnB,GAAG,CAAC,CAAC,CAACsB,IAAD,EAAOK,OAAP,CAAD,MAAsB;MACxBL,IADwB;MAExBK;IAFwB,CAAtB,CAAD,CADQ,CAAb;EAMD;;EAGCC,SAAS;IACP,KAAKpB,MAAL,CAAYqB,QAAZ,CAAqB,CAAC,QAAD,EAAW,KAAKf,OAAhB,CAArB;EACD;;EAEDgB,cAAc,CAACC,QAAD,EAAiB;IAC7BC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,QAA9B;EACD;;AA3C0B;;;mBAAlB1B,oBAAkBF;AAAA;;;QAAlBE;EAAkB6B;EAAAC;EAAAC;IAAA;;;;;;;;;MCV/BjC;;MAoCAA;;;;MApCmCA","names":["map","filter","combineLatest","i0","data_r1","TaskModalComponent","constructor","route","router","boardService","taskId","snapshot","paramMap","get","boardId","parent","Error","task$","tasks$","pipe","tasks","find","task","id","Boolean","data$","columns$","columns","goToBoard","navigate","updateTaskName","taskName","console","log","selectors","hostVars","hostBindings"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/taskModal/taskModal.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/taskModal/taskModal.component.html"],"sourcesContent":["import { Component, HostBinding } from \"@angular/core\";\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, Observable,filter, combineLatest } from \"rxjs\";\nimport { BoardService } from \"../../services/board.service\";\nimport { TaskInterface } from 'src/app/shared/types/task.interface';\n\n@Component({\n  selector: \"task-modal\",\n  templateUrl: \"./taskModal.component.html\",\n})\nexport class TaskModalComponent {\n  @HostBinding('class') classes = 'task-modal';\n\n  boardId: string;\n  taskId: string;\n  task$: Observable<TaskInterface>;\n  data$: Observable<{task: TaskInterface}>\n\n  constructor(private route: ActivatedRoute, private router: Router, private boardService: BoardService) {\n    const taskId = this.route.snapshot.paramMap.get('taskId');\n    const boardId = this.route.parent?.snapshot.paramMap.get('boardId');\n    \n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n    if (!taskId) {\n      throw new Error('Cant get taskID from url');\n    }\n\n    this.taskId = taskId\n    this.boardId = boardId;\n    this.task$ = this.boardService.tasks$.pipe(\n      map((tasks) => {\n        return tasks.find((task) => task.id === this.taskId);\n      }),\n      filter(Boolean)\n    );\n    this.data$ = combineLatest([this.task$, this.boardService.columns$]).pipe(\n      map(([task, columns]) => ({\n        task,\n        columns,\n      }))\n    );\n  }\n  \n\n    goToBoard(): void {\n      this.router.navigate(['boards', this.boardId]);\n    }\n  \n    updateTaskName(taskName: string): void {\n      console.log('updateTaskName', taskName);\n    }\n  }\n  ","<div class=\"task-modal-container\" *ngIf=\"data$ | async as data\">\n  <div class=\"task-modal-header\">\n    <inline-form \n      class=\"task-modal-edit-title-form\"\n      [defaultText]=\"data.task.title\"\n      [title]=\"data.task.title\"\n      (handleSubmit)=\"updateTaskName($event)\"\n      ></inline-form>\n    <img\n      src=\"/assets/close_icon.svg\"\n      class=\"task-modal-close\"\n      (click)=\"goToBoard()\"\n    />\n  </div>\n  <div class=\"task-modal-body\">\n    <div>\n      <form class=\"column-select-container\">SELECT COLUMN</form>\n      <div class=\"task-modal-description\">\n        <div class=\"task-modal-description-label\">Description</div>\n        <inline-form\n          class=\"task-modal-edit-description-form\"\n          [defaultText]=\"data.task.description\" ||\n        ></inline-form>\n      </div>\n    </div>\n    <div class=\"task-modal-actions\">\n      <div class=\"task-modal-actions-label\">Actions</div>\n      <div>\n        <div class=\"task-modal-actions-action\">\n          <img src=\"/assets/trash.svg\" class=\"task-modal-actions-icon\" />\n          Delete\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"task-modal-backdrop\"></div>"]},"metadata":{},"sourceType":"module"}