{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { combineLatest, filter, map } from 'rxjs';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/boards.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/board.service\";\nimport * as i4 from \"src/app/shared/services/socket.service\";\nimport * as i5 from \"../../../shared/services/columns.service\";\nimport * as i6 from \"../../../shared/services/tasks.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../../../shared/modules/topbar/components/topbar/topbar.component\";\nimport * as i9 from \"../../../shared/modules/inlineForm/components/inlineForm/inlineForm.component\";\n\nfunction BoardComponent_div_1_div_4_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r5.title, \" \");\n  }\n}\n\nfunction BoardComponent_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, BoardComponent_div_1_div_4_div_3_Template, 2, 1, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r3 = ctx.$implicit;\n    const data_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(column_r3.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getTasksByColumn(column_r3.id, data_r1.tasks));\n  }\n}\n\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2);\n    i0.ɵɵtext(2, \"INLINE FORM BOARD\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 3);\n    i0.ɵɵtemplate(4, BoardComponent_div_1_div_4_Template, 4, 2, \"div\", 4);\n    i0.ɵɵelementStart(5, \"inline-form\", 5);\n    i0.ɵɵlistener(\"handleSubmit\", function BoardComponent_div_1_Template_inline_form_handleSubmit_5_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.createColumn($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const data_r1 = ctx.ngIf;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", data_r1.columns);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hasButton\", true);\n  }\n}\n\nexport class BoardComponent {\n  constructor(boardsService, route, router, boardService, socketService, columnsService, tasksService) {\n    this.boardsService = boardsService;\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.socketService = socketService;\n    this.columnsService = columnsService;\n    this.tasksService = tasksService;\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([this.boardService.board$.pipe(filter(Boolean)), this.boardService.columns$, this.boardService.tasks$]).pipe(map(([board, columns, tasks]) => ({\n      board,\n      columns,\n      tasks\n    })));\n  }\n\n  ngOnInit() {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, {\n      boardId: this.boardId\n    });\n    this.fetchData();\n    this.initializeListeners();\n  }\n\n  initializeListeners() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    });\n  }\n\n  fetchData() {\n    this.boardsService.getBoard(this.boardId).subscribe(board => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe(columns => {\n      this.boardService.setColumns(columns);\n    });\n  }\n\n  createColumn(title) {\n    const columnInput = {\n      title,\n      boardId: this.boardId\n    };\n    this.columnsService.createColumn(columnInput);\n  }\n\n}\n\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.BoardsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.BoardService), i0.ɵɵdirectiveInject(i4.SocketService), i0.ɵɵdirectiveInject(i5.ColumnsService), i0.ɵɵdirectiveInject(i6.TasksService));\n};\n\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"board\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"board\", 4, \"ngIf\"], [1, \"board\"], [1, \"board-header-container\"], [1, \"columns\"], [\"class\", \"column\", 4, \"ngFor\", \"ngForOf\"], [\"defaultText\", \"Add a list\", \"buttonText\", \"Add list\", \"inputPlaceholder\", \"Add column name\", 1, \"create-column-form\", 3, \"hasButton\", \"handleSubmit\"], [1, \"column\"], [1, \"column-title\"], [\"class\", \"task\", 4, \"ngFor\", \"ngForOf\"], [1, \"task\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-topbar\");\n      i0.ɵɵtemplate(1, BoardComponent_div_1_Template, 6, 2, \"div\", 0);\n      i0.ɵɵpipe(2, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx.data$));\n    }\n  },\n  dependencies: [i7.NgForOf, i7.NgIf, i8.TopbarComponent, i9.InlineFormComponent, i7.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["NavigationStart","combineLatest","filter","map","SocketEventsEnum","i0","BoardComponent","constructor","boardsService","route","router","boardService","socketService","columnsService","tasksService","boardId","snapshot","paramMap","get","Error","data$","board$","pipe","Boolean","columns$","tasks$","board","columns","tasks","ngOnInit","emit","boardsJoin","fetchData","initializeListeners","events","subscribe","event","console","log","leaveBoard","getBoard","setBoard","getColumns","setColumns","createColumn","title","columnInput","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationStart, Router } from '@angular/router';\nimport { combineLatest, filter, map, Observable } from 'rxjs';\nimport { BoardsService } from 'src/app/shared/services/boards.service';\nimport { BoardInterface } from 'src/app/shared/types/board.interface';\nimport { BoardService } from '../../services/board.service';\nimport { SocketService } from 'src/app/shared/services/socket.service';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport { ColumnInterface } from '../../../shared/types/column.interface';\nimport { ColumnsService } from '../../../shared/services/columns.service';\nimport { ColumnInputInterface } from 'src/app/shared/types/columnInput.interface';\nimport { TasksService } from '../../../shared/services/tasks.service';\nimport { TaskInterface } from 'src/app/shared/types/task.interface';\n\n\n@Component({\n  selector: 'board',\n  templateUrl: './board.component.html',\n})\nexport class BoardComponent implements OnInit {\n  boardId: string;\n  data$: Observable<{ \n    board: BoardInterface; \n    columns: ColumnInterface[];\n    tasks: TaskInterface[];\n  }>;\n\n  constructor(\n    private boardsService: BoardsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private boardService: BoardService,\n    private socketService: SocketService,\n    private columnsService: ColumnsService,\n    private tasksService: TasksService,\n  ) {\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([\n      this.boardService.board$.pipe(filter(Boolean)),\n      this.boardService.columns$,\n      this.boardService.tasks$,\n    ]).pipe(map(([board, columns, tasks]) => ({ \n      board, \n      columns,\n      tasks,\n     }))\n      );\n  }\n\n  ngOnInit(): void {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, { \n      boardId: this.boardId \n    });\n    this.fetchData();\n    this.initializeListeners()\n  }\n\n  initializeListeners(): void {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    })\n  }\n\n  fetchData(): void {\n    this.boardsService.getBoard(this.boardId).subscribe((board) => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe((columns) => {\n      this.boardService.setColumns(columns);\n    })\n\n  }\n\n  createColumn(title: string): void {\n    const columnInput: ColumnInputInterface = {\n      title,\n      boardId: this.boardId,\n  };\n  this.columnsService.createColumn(columnInput);\n  }\n\n  getTas\n}","<app-topbar></app-topbar>\n\n<div class=\"board\" *ngIf=\"data$ | async as data\">\n  <div class=\"board-header-container\">INLINE FORM BOARD</div>\n  <div class=\"columns\">\n    <div class=\"column\" *ngFor=\"let column of data.columns\">\n      <div class=\"column-title\">{{ column.title }}</div>\n      <div *ngFor=\"let task of getTasksByColumn(column.id, data.tasks)\" class=\"task\">\n        {{task.title}}\n      </div>\n    </div>\n    <inline-form\n      class=\"create-column-form\"\n      defaultText=\"Add a list\"\n      [hasButton]=\"true\"\n      buttonText=\"Add list\"\n      inputPlaceholder=\"Add column name\"\n      (handleSubmit)=\"createColumn($event)\"\n    ></inline-form>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module"}