{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { combineLatest, filter, map } from 'rxjs';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/boards.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/board.service\";\nimport * as i4 from \"src/app/shared/services/socket.service\";\nimport * as i5 from \"../../../shared/services/columns.service\";\nimport * as i6 from \"src/app/shared/services/tasks.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../../../shared/modules/topbar/components/topbar/topbar.component\";\nimport * as i9 from \"../../../shared/modules/inlineForm/components/inlineForm/inlineForm.component\";\n\nfunction BoardComponent_div_1_div_4_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r5.title, \" \");\n  }\n}\n\nfunction BoardComponent_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, BoardComponent_div_1_div_4_div_3_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementStart(4, \"inline-form\", 10);\n    i0.ɵɵlistener(\"handleSubmit\", function BoardComponent_div_1_div_4_Template_inline_form_handleSubmit_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const column_r3 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.createTask($event, column_r3.id));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const column_r3 = ctx.$implicit;\n    const data_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(column_r3.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getTasksByColumn(column_r3.id, data_r1.tasks));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hasButton\", true);\n  }\n}\n\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2);\n    i0.ɵɵelement(2, \"inline-form\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 4);\n    i0.ɵɵtemplate(4, BoardComponent_div_1_div_4_Template, 5, 3, \"div\", 5);\n    i0.ɵɵelementStart(5, \"inline-form\", 6);\n    i0.ɵɵlistener(\"handleSubmit\", function BoardComponent_div_1_Template_inline_form_handleSubmit_5_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.createColumn($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const data_r1 = ctx.ngIf;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", data_r1.columns);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hasButton\", true);\n  }\n}\n\nexport class BoardComponent {\n  constructor(boardsService, route, router, boardService, socketService, columnsService, tasksService) {\n    this.boardsService = boardsService;\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.socketService = socketService;\n    this.columnsService = columnsService;\n    this.tasksService = tasksService;\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([this.boardService.board$.pipe(filter(Boolean)), this.boardService.columns$, this.boardService.tasks$]).pipe(map(([board, columns, tasks]) => ({\n      board,\n      columns,\n      tasks\n    })));\n  }\n\n  ngOnInit() {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, {\n      boardId: this.boardId\n    });\n    this.fetchData();\n    this.initializeListeners();\n  }\n\n  initializeListeners() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    });\n    this.socketService.listen(SocketEventsEnum.columnsCreateSuccess).subscribe(column => {\n      this.boardService.addColumn(column);\n    });\n    this.socketService.listen(SocketEventsEnum.tasksCreateSuccess).subscribe(task => {\n      this.boardService.addTask(task);\n    });\n  }\n\n  fetchData() {\n    this.boardsService.getBoard(this.boardId).subscribe(board => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe(columns => {\n      this.boardService.setColumns(columns);\n    });\n    this.tasksService.getTasks(this.boardId).subscribe(tasks => {\n      this.boardService.setTasks(tasks);\n    });\n  }\n\n  createColumn(title) {\n    const columnInput = {\n      title,\n      boardId: this.boardId\n    };\n    this.columnsService.createColumn(columnInput);\n  }\n\n  createTask(title, columnId) {\n    const taskInput = {\n      title,\n      boardId: this.boardId,\n      columnId\n    };\n    this.tasksService.createTask(taskInput);\n  }\n\n  getTasksByColumn(columnId, tasks) {\n    return tasks.filter(task => task.columnId === columnId);\n  }\n\n}\n\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.BoardsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.BoardService), i0.ɵɵdirectiveInject(i4.SocketService), i0.ɵɵdirectiveInject(i5.ColumnsService), i0.ɵɵdirectiveInject(i6.TasksService));\n};\n\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"board\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"board\", 4, \"ngIf\"], [1, \"board\"], [1, \"board-header-container\"], [1, \"edit-board-title\"], [1, \"columns\"], [\"class\", \"column\", 4, \"ngFor\", \"ngForOf\"], [\"defaultText\", \"Add a list\", \"buttonText\", \"Add list\", \"inputPlaceholder\", \"Add column name\", 1, \"create-column-form\", 3, \"hasButton\", \"handleSubmit\"], [1, \"column\"], [1, \"column-title\"], [\"class\", \"task\", 4, \"ngFor\", \"ngForOf\"], [\"defaultText\", \"Add a card\", \"buttonText\", \"Add card\", \"inputPlaceholder\", \"Enter a title for this card\", 1, \"create-task-form\", 3, \"hasButton\", \"handleSubmit\"], [1, \"task\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-topbar\");\n      i0.ɵɵtemplate(1, BoardComponent_div_1_Template, 6, 2, \"div\", 0);\n      i0.ɵɵpipe(2, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx.data$));\n    }\n  },\n  dependencies: [i7.NgForOf, i7.NgIf, i8.TopbarComponent, i9.InlineFormComponent, i7.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["NavigationStart","combineLatest","filter","map","SocketEventsEnum","i0","BoardComponent","constructor","boardsService","route","router","boardService","socketService","columnsService","tasksService","boardId","snapshot","paramMap","get","Error","data$","board$","pipe","Boolean","columns$","tasks$","board","columns","tasks","ngOnInit","emit","boardsJoin","fetchData","initializeListeners","events","subscribe","event","console","log","leaveBoard","listen","columnsCreateSuccess","column","addColumn","tasksCreateSuccess","task","addTask","getBoard","setBoard","getColumns","setColumns","getTasks","setTasks","createColumn","title","columnInput","createTask","columnId","taskInput","getTasksByColumn","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationStart, Router } from '@angular/router';\nimport { combineLatest, filter, map, Observable } from 'rxjs';\nimport { BoardsService } from 'src/app/shared/services/boards.service';\nimport { BoardInterface } from 'src/app/shared/types/board.interface';\nimport { BoardService } from '../../services/board.service';\nimport { SocketService } from 'src/app/shared/services/socket.service';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport { ColumnInterface } from '../../../shared/types/column.interface';\nimport { ColumnsService } from '../../../shared/services/columns.service';\nimport { ColumnInputInterface } from 'src/app/shared/types/columnInput.interface';\nimport { TasksService } from 'src/app/shared/services/tasks.service';\nimport { TaskInterface } from 'src/app/shared/types/task.interface';\nimport { TaskInputInterface } from 'src/app/shared/types/taskInput.interface';\n\n\n\n\n@Component({\n  selector: 'board',\n  templateUrl: './board.component.html',\n})\nexport class BoardComponent implements OnInit {\n  boardId: string;\n  data$: Observable<{ \n    board: BoardInterface; \n    columns: ColumnInterface[];\n    tasks: TaskInterface[];\n  }>;\n\n  constructor(\n    private boardsService: BoardsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private boardService: BoardService,\n    private socketService: SocketService,\n    private columnsService: ColumnsService,\n    private tasksService: TasksService,\n    \n  ) {\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([\n      this.boardService.board$.pipe(filter(Boolean)),\n      this.boardService.columns$,\n      this.boardService.tasks$,\n    ]).pipe(\n      map(([board, columns, tasks]) => ({ \n        board, \n        columns,\n        tasks,\n     }))\n      );\n  }\n\n  ngOnInit(): void {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, { \n      boardId: this.boardId \n    });\n    this.fetchData();\n    this.initializeListeners()\n  }\n\n  initializeListeners(): void {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    })\n\n    this.socketService\n      .listen<ColumnInterface>(SocketEventsEnum.columnsCreateSuccess)\n      .subscribe((column) => {\n        this.boardService.addColumn(column);\n      })\n\n      this.socketService\n      .listen<TaskInterface>(SocketEventsEnum.tasksCreateSuccess)\n      .subscribe((task) => {\n        this.boardService.addTask(task);\n      })\n  }\n\n  fetchData(): void {\n    this.boardsService.getBoard(this.boardId).subscribe((board) => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe((columns) => {\n      this.boardService.setColumns(columns);\n    });\n    this.tasksService.getTasks(this.boardId).subscribe((tasks) => {\n      this.boardService.setTasks(tasks);\n    })\n\n  }\n\n  createColumn(title: string): void {\n    const columnInput: ColumnInputInterface = {\n      title,\n      boardId: this.boardId,\n  };\n  this.columnsService.createColumn(columnInput);\n  }\n\n  createTask(title: string, columnId: string): void {\n    const taskInput: TaskInputInterface = {\n      title,\n      boardId: this.boardId,\n      columnId,\n  };\n  this.tasksService.createTask(taskInput);\n  }\n\n  getTasksByColumn(columnId: string, tasks: TaskInterface[]): TaskInterface[] {\n    return tasks.filter(task => task.columnId === columnId);\n  }\n}","<app-topbar></app-topbar>\n\n<div class=\"board\" *ngIf=\"data$ | async as data\">\n  <div class=\"board-header-container\">\n    <inline-form\n      class=\"edit-board-title\"\n    >\n\n    </inline-form>\n  </div>\n  <div class=\"columns\">\n    <div class=\"column\" *ngFor=\"let column of data.columns\">\n      <div class=\"column-title\">{{ column.title }}</div>\n      <div\n        *ngFor=\"let task of getTasksByColumn(column.id, data.tasks)\"\n        class=\"task\"\n      >\n        {{ task.title }}\n      </div>\n      <inline-form\n        class=\"create-task-form\"\n        defaultText=\"Add a card\"\n        [hasButton]=\"true\"\n        buttonText=\"Add card\"\n        inputPlaceholder=\"Enter a title for this card\"\n        (handleSubmit)=\"createTask($event, column.id)\"\n      ></inline-form>\n    </div>\n    <inline-form\n      class=\"create-column-form\"\n      defaultText=\"Add a list\"\n      [hasButton]=\"true\"\n      buttonText=\"Add list\"\n      inputPlaceholder=\"Add column name\"\n      (handleSubmit)=\"createColumn($event)\"\n    ></inline-form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}