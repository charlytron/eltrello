{"ast":null,"code":"import { map, filter, combineLatest } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/board.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../shared/modules/inlineForm/components/inlineForm/inlineForm.component\";\n\nfunction TaskModalComponent_div_0_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", column_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", column_r3.title, \" \");\n  }\n}\n\nfunction TaskModalComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"inline-form\", 4);\n    i0.ɵɵlistener(\"handleSubmit\", function TaskModalComponent_div_0_Template_inline_form_handleSubmit_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateTaskName($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"img\", 5);\n    i0.ɵɵlistener(\"click\", function TaskModalComponent_div_0_Template_img_click_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.goToBoard());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 6)(5, \"div\")(6, \"form\", 7)(7, \"select\", 8);\n    i0.ɵɵtemplate(8, TaskModalComponent_div_0_option_8_Template, 2, 2, \"option\", 9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 10)(10, \"div\", 11);\n    i0.ɵɵtext(11, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"inline-form\", 12);\n    i0.ɵɵlistener(\"handleSubmit\", function TaskModalComponent_div_0_Template_inline_form_handleSubmit_12_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateTaskDescription($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"div\", 13)(14, \"div\", 14);\n    i0.ɵɵtext(15, \"Actions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\")(17, \"div\", 15);\n    i0.ɵɵelement(18, \"img\", 16);\n    i0.ɵɵtext(19, \" Delete \");\n    i0.ɵɵelementEnd()()()()();\n  }\n\n  if (rf & 2) {\n    const data_r1 = ctx.ngIf;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"defaultText\", data_r1.task.title)(\"title\", data_r1.task.title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.columnForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", data_r1.columns);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"defaultText\", data_r1.task.description || \"Add a more detailed description here\")(\"title\", data_r1.task.description || \"\")(\"hasButton\", true);\n  }\n}\n\nexport class TaskModalComponent {\n  constructor(route, router, boardService, fb) {\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.fb = fb;\n    this.classes = 'task-modal';\n    this.columnForm = this.fb.group({\n      columnId: [null]\n    });\n    const taskId = this.route.snapshot.paramMap.get('taskId');\n    const boardId = this.route.parent?.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    if (!taskId) {\n      throw new Error('Cant get taskID from url');\n    }\n\n    this.taskId = taskId;\n    this.boardId = boardId;\n    this.task$ = this.boardService.tasks$.pipe(map(tasks => {\n      return tasks.find(task => task.id === this.taskId);\n    }), filter(Boolean));\n    this.data$ = combineLatest([this.task$, this.boardService.columns$]).pipe(map(([task, columns]) => ({\n      task,\n      columns\n    })));\n    this.task$.subscribe(task => {\n      this.columnForm.patchValue({\n        columnId\n      });\n    });\n  }\n\n  goToBoard() {\n    this.router.navigate(['boards', this.boardId]);\n  }\n\n  updateTaskName(taskName) {\n    console.log('updateTaskName', taskName);\n  }\n\n  updateTaskDescription(taskDescription) {\n    console.log('updateTaskDescription', taskDescription);\n  }\n\n}\n\nTaskModalComponent.ɵfac = function TaskModalComponent_Factory(t) {\n  return new (t || TaskModalComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.BoardService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\n\nTaskModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskModalComponent,\n  selectors: [[\"task-modal\"]],\n  hostVars: 2,\n  hostBindings: function TaskModalComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.classes);\n    }\n  },\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"task-modal-container\", 4, \"ngIf\"], [1, \"task-modal-backdrop\"], [1, \"task-modal-container\"], [1, \"task-modal-header\"], [1, \"task-modal-edit-title-form\", 3, \"defaultText\", \"title\", \"handleSubmit\"], [\"src\", \"/assets/close_icon.svg\", 1, \"task-modal-close\", 3, \"click\"], [1, \"task-modal-body\"], [1, \"column-select-container\", 3, \"formGroup\"], [\"formControlName\", \"columnId\", 1, \"column-select\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"task-modal-description\"], [1, \"task-modal-description-label\"], [\"inputType\", \"textarea\", \"buttonText\", \"Save\", 1, \"task-modal-edit-description-form\", 3, \"defaultText\", \"title\", \"hasButton\", \"handleSubmit\"], [1, \"task-modal-actions\"], [1, \"task-modal-actions-label\"], [1, \"task-modal-actions-action\"], [\"src\", \"/assets/trash.svg\", 1, \"task-modal-actions-icon\"], [3, \"ngValue\"]],\n  template: function TaskModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TaskModalComponent_div_0_Template, 20, 7, \"div\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelement(2, \"div\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.data$));\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i5.InlineFormComponent, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["map","filter","combineLatest","i0","data_r1","TaskModalComponent","constructor","route","router","boardService","fb","group","columnId","taskId","snapshot","paramMap","get","boardId","parent","Error","task$","tasks$","pipe","tasks","find","task","id","Boolean","data$","columns$","columns","subscribe","columnForm","patchValue","goToBoard","navigate","updateTaskName","taskName","console","log","updateTaskDescription","taskDescription","selectors","hostVars","hostBindings"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/taskModal/taskModal.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/taskModal/taskModal.component.html"],"sourcesContent":["import { Component, HostBinding } from \"@angular/core\";\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, Observable,filter, combineLatest } from \"rxjs\";\nimport { BoardService } from \"../../services/board.service\";\nimport { TaskInterface } from 'src/app/shared/types/task.interface';\nimport { ColumnInterface } from 'src/app/shared/types/column.interface';\nimport { FormBuilder } from \"@angular/forms\";\n\n@Component({\n  selector: \"task-modal\",\n  templateUrl: \"./taskModal.component.html\",\n})\nexport class TaskModalComponent {\n  @HostBinding('class') classes = 'task-modal';\n\n  boardId: string;\n  taskId: string;\n  task$: Observable<TaskInterface>;\n  data$: Observable<{task: TaskInterface, columns: ColumnInterface[]}>\n  columnForm = this.fb.group({\n    columnId: [null],\n  })\n\n  constructor(\n    private route: ActivatedRoute, \n    private router: Router, \n    private boardService: BoardService,\n    private fb: FormBuilder\n\n  ) {\n    const taskId = this.route.snapshot.paramMap.get('taskId');\n    const boardId = this.route.parent?.snapshot.paramMap.get('boardId');\n    \n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n    if (!taskId) {\n      throw new Error('Cant get taskID from url');\n    }\n\n    this.taskId = taskId\n    this.boardId = boardId;\n    this.task$ = this.boardService.tasks$.pipe(\n      map((tasks) => {\n        return tasks.find((task) => task.id === this.taskId);\n      }),\n      filter(Boolean)\n    );\n    this.data$ = combineLatest([this.task$, this.boardService.columns$]).pipe(\n      map(([task, columns]) => ({\n        task,\n        columns,\n      }))\n    );\n\n    this.task$.subscribe(task => {\n      this.columnForm.patchValue({columnId})\n    })\n  }\n  \n\n    goToBoard(): void {\n      this.router.navigate(['boards', this.boardId]);\n    }\n  \n    updateTaskName(taskName: string): void {\n      console.log('updateTaskName', taskName);\n    }\n    updateTaskDescription(taskDescription: string): void {\n      console.log('updateTaskDescription', taskDescription);\n    }\n  }\n  ","<div class=\"task-modal-container\" *ngIf=\"data$ | async as data\">\n  <div class=\"task-modal-header\">\n    <inline-form \n      class=\"task-modal-edit-title-form\"\n      [defaultText]=\"data.task.title\"\n      [title]=\"data.task.title\"\n      (handleSubmit)=\"updateTaskName($event)\"\n      ></inline-form>\n    <img\n      src=\"/assets/close_icon.svg\"\n      class=\"task-modal-close\"\n      (click)=\"goToBoard()\"\n    />\n  </div>\n  <div class=\"task-modal-body\">\n    <div>\n      <form [formGroup]=\"columnForm\" class=\"column-select-container\">\n        <select formControlName=\"columnId\" class=\"column-select\">\n          <option *ngFor=\"let column of data.columns\" [ngValue]=\"column.id\">\n            {{ column.title }}\n          </option>\n        </select>  \n      </form>\n      <div class=\"task-modal-description\">\n        <div class=\"task-modal-description-label\">Description</div>\n        <inline-form\n          class=\"task-modal-edit-description-form\"\n          [defaultText]=\"data.task.description || 'Add a more detailed description here'\"\n          [title]=\"data.task.description || ''\"\n          inputType=\"textarea\"\n          [hasButton]=\"true\"\n          buttonText=\"Save\"\n          (handleSubmit)=\"updateTaskDescription($event)\"\n        ></inline-form>\n      </div>\n    </div>\n    <div class=\"task-modal-actions\">\n      <div class=\"task-modal-actions-label\">Actions</div>\n      <div>\n        <div class=\"task-modal-actions-action\">\n          <img src=\"/assets/trash.svg\" class=\"task-modal-actions-icon\" />\n          Delete\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"task-modal-backdrop\"></div>"]},"metadata":{},"sourceType":"module"}