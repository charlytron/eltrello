{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { combineLatest, filter, map, Subject, takeUntil } from 'rxjs';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/boards.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/board.service\";\nimport * as i4 from \"src/app/shared/services/socket.service\";\nimport * as i5 from \"src/app/shared/services/columns.service\";\nimport * as i6 from \"src/app/shared/services/tasks.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../../../shared/modules/topbar/components/topbar/topbar.component\";\nimport * as i9 from \"../../../shared/modules/inlineForm/components/inlineForm/inlineForm.component\";\n\nfunction BoardComponent_div_1_div_6_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r5.title, \" \");\n  }\n}\n\nfunction BoardComponent_div_1_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9)(2, \"inline-form\", 10);\n    i0.ɵɵlistener(\"handleSubmit\", function BoardComponent_div_1_div_6_Template_inline_form_handleSubmit_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const column_r3 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.updateColumnName($event, column_r3.id));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"img\", 11);\n    i0.ɵɵlistener(\"click\", function BoardComponent_div_1_div_6_Template_img_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const column_r3 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.deleteColumn(column_r3.id));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, BoardComponent_div_1_div_6_div_4_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementStart(5, \"inline-form\", 13);\n    i0.ɵɵlistener(\"handleSubmit\", function BoardComponent_div_1_div_6_Template_inline_form_handleSubmit_5_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const column_r3 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.createTask($event, column_r3.id));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const column_r3 = ctx.$implicit;\n    const data_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"defaultText\", column_r3.title)(\"title\", column_r3.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.getTasksByColumn(column_r3.id, data_r1.tasks));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hasButton\", true);\n  }\n}\n\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"inline-form\", 3);\n    i0.ɵɵlistener(\"handleSubmit\", function BoardComponent_div_1_Template_inline_form_handleSubmit_2_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.updateBoardName($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function BoardComponent_div_1_Template_div_click_3_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.deleteBoard());\n    });\n    i0.ɵɵtext(4, \"Delete board\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 5);\n    i0.ɵɵtemplate(6, BoardComponent_div_1_div_6_Template, 6, 4, \"div\", 6);\n    i0.ɵɵelementStart(7, \"inline-form\", 7);\n    i0.ɵɵlistener(\"handleSubmit\", function BoardComponent_div_1_Template_inline_form_handleSubmit_7_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.createColumn($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const data_r1 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"defaultText\", data_r1.board.title)(\"title\", data_r1.board.title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", data_r1.columns);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hasButton\", true);\n  }\n}\n\nexport class BoardComponent {\n  constructor(boardsService, route, router, boardService, socketService, columnsService, tasksService) {\n    this.boardsService = boardsService;\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.socketService = socketService;\n    this.columnsService = columnsService;\n    this.tasksService = tasksService;\n    this.unsubscribe$ = new Subject();\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([this.boardService.board$.pipe(filter(Boolean)), this.boardService.columns$, this.boardService.tasks$]).pipe(map(([board, columns, tasks]) => ({\n      board,\n      columns,\n      tasks\n    })));\n  }\n\n  ngOnInit() {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, {\n      boardId: this.boardId\n    });\n    this.fetchData();\n    this.initializeListeners();\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  initializeListeners() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.boardService.leaveBoard(this.boardId);\n      }\n    });\n    this.socketService.listen(SocketEventsEnum.columnsCreateSuccess).pipe(takeUntil(this.unsubscribe$)).subscribe(column => {\n      this.boardService.addColumn(column);\n    });\n    this.socketService.listen(SocketEventsEnum.columnsDeleteSuccess).pipe(takeUntil(this.unsubscribe$)).subscribe(columnId => {\n      this.boardService.deleteColumn(columnId);\n    });\n    this.socketService.listen(SocketEventsEnum.tasksCreateSuccess).pipe(takeUntil(this.unsubscribe$)).subscribe(task => {\n      this.boardService.addTask(task);\n    });\n    this.socketService.listen(SocketEventsEnum.boardsUpdateSuccess).pipe(takeUntil(this.unsubscribe$)).subscribe(updatedBoard => {\n      this.boardService.updateBoard(updatedBoard);\n    });\n    this.socketService.listen(SocketEventsEnum.columnsUpdateSuccess) //.pipe(takeUntil(this.unsubscribe$))\n    .subscribe(updatedColumn => {\n      this.boardService.updateColumn(updatedColumn);\n    });\n    this.socketService.listen(SocketEventsEnum.boardsDeleteSuccess).pipe(takeUntil(this.unsubscribe$)).subscribe(() => {\n      this.router.navigateByUrl('/boards');\n    });\n  }\n\n  fetchData() {\n    this.boardsService.getBoard(this.boardId).subscribe(board => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe(columns => {\n      this.boardService.setColumns(columns);\n    });\n    this.tasksService.getTasks(this.boardId).subscribe(tasks => {\n      this.boardService.setTasks(tasks);\n    });\n  }\n\n  createColumn(title) {\n    const columnInput = {\n      title,\n      boardId: this.boardId\n    };\n    this.columnsService.createColumn(columnInput);\n  }\n\n  createTask(title, columnId) {\n    const taskInput = {\n      title,\n      boardId: this.boardId,\n      columnId\n    };\n    this.tasksService.createTask(taskInput);\n  }\n\n  getTasksByColumn(columnId, tasks) {\n    return tasks.filter(task => task.columnId === columnId);\n  }\n\n  updateBoardName(boardName) {\n    this.boardsService.updateBoard(this.boardId, {\n      title: boardName\n    });\n  }\n\n  deleteBoard() {\n    if (confirm('Are you sure you want to delete the board?')) {\n      this.boardsService.deleteBoard(this.boardId);\n    }\n  }\n\n  deleteColumn(columnId) {\n    this.columnsService.deleteColumn(this.boardId, columnId);\n  }\n\n  updateColumnName(columnName, columnId) {\n    this.columnsService.updateColumn(this.boardId, columnId, {\n      title: columnName\n    });\n  }\n\n}\n\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.BoardsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.BoardService), i0.ɵɵdirectiveInject(i4.SocketService), i0.ɵɵdirectiveInject(i5.ColumnsService), i0.ɵɵdirectiveInject(i6.TasksService));\n};\n\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"board\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"board\", 4, \"ngIf\"], [1, \"board\"], [1, \"board-header-container\"], [1, \"edit-board-form\", 3, \"defaultText\", \"title\", \"handleSubmit\"], [1, \"delete-board\", 3, \"click\"], [1, \"columns\"], [\"class\", \"column\", 4, \"ngFor\", \"ngForOf\"], [\"defaultText\", \"Add a list\", \"buttonText\", \"Add list\", \"inputPlaceholder\", \"Add column name\", 1, \"create-column-form\", 3, \"hasButton\", \"handleSubmit\"], [1, \"column\"], [1, \"column-title\"], [1, \"edit-column-form\", 3, \"defaultText\", \"title\", \"handleSubmit\"], [\"src\", \"/assets/close_icon.svg\", 1, \"column-delete-icon\", 3, \"click\"], [\"class\", \"task\", 4, \"ngFor\", \"ngForOf\"], [\"defaultText\", \"Add a card\", \"buttonText\", \"Add card\", \"inputPlaceholder\", \"Enter a title for this card\", 1, \"create-task-form\", 3, \"hasButton\", \"handleSubmit\"], [1, \"task\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-topbar\");\n      i0.ɵɵtemplate(1, BoardComponent_div_1_Template, 8, 4, \"div\", 0);\n      i0.ɵɵpipe(2, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx.data$));\n    }\n  },\n  dependencies: [i7.NgForOf, i7.NgIf, i8.TopbarComponent, i9.InlineFormComponent, i7.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["NavigationStart","combineLatest","filter","map","Subject","takeUntil","SocketEventsEnum","i0","column_r3","data_r1","BoardComponent","constructor","boardsService","route","router","boardService","socketService","columnsService","tasksService","boardId","snapshot","paramMap","get","Error","data$","board$","pipe","Boolean","columns$","tasks$","board","columns","tasks","ngOnInit","emit","boardsJoin","fetchData","initializeListeners","ngOnDestroy","unsubscribe$","next","complete","events","subscribe","event","leaveBoard","listen","columnsCreateSuccess","column","addColumn","columnsDeleteSuccess","columnId","deleteColumn","tasksCreateSuccess","task","addTask","boardsUpdateSuccess","updatedBoard","updateBoard","columnsUpdateSuccess","updatedColumn","updateColumn","boardsDeleteSuccess","navigateByUrl","getBoard","setBoard","getColumns","setColumns","getTasks","setTasks","createColumn","title","columnInput","createTask","taskInput","getTasksByColumn","updateBoardName","boardName","deleteBoard","confirm","updateColumnName","columnName","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationStart, Router } from '@angular/router';\nimport { combineLatest, filter, map, Observable, Subject, takeUntil } from 'rxjs';\nimport { BoardsService } from 'src/app/shared/services/boards.service';\nimport { ColumnsService } from 'src/app/shared/services/columns.service';\nimport { SocketService } from 'src/app/shared/services/socket.service';\nimport { TasksService } from 'src/app/shared/services/tasks.service';\nimport { BoardInterface } from 'src/app/shared/types/board.interface';\nimport { ColumnInterface } from 'src/app/shared/types/column.interface';\nimport { ColumnInputInterface } from 'src/app/shared/types/columnInput.interface';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport { TaskInterface } from 'src/app/shared/types/task.interface';\nimport { TaskInputInterface } from 'src/app/shared/types/taskInput.interface';\nimport { BoardService } from '../../services/board.service';\n\n@Component({\n  selector: 'board',\n  templateUrl: './board.component.html',\n})\nexport class BoardComponent implements OnInit, OnDestroy {\n  boardId: string;\n  data$: Observable<{\n    board: BoardInterface;\n    columns: ColumnInterface[];\n    tasks: TaskInterface[];\n  }>;\n  unsubscribe$ = new Subject<void>();\n\n  constructor(\n    private boardsService: BoardsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private boardService: BoardService,\n    private socketService: SocketService,\n    private columnsService: ColumnsService,\n    private tasksService: TasksService\n  ) {\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([\n      this.boardService.board$.pipe(filter(Boolean)),\n      this.boardService.columns$,\n      this.boardService.tasks$,\n    ]).pipe(\n      map(([board, columns, tasks]) => ({\n        board,\n        columns,\n        tasks,\n      }))\n    );\n  }\n\n  ngOnInit(): void {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, {\n      boardId: this.boardId,\n    });\n    this.fetchData();\n    this.initializeListeners();\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  initializeListeners(): void {\n    this.router.events.subscribe((event) => {\n      if (event instanceof NavigationStart) {\n        this.boardService.leaveBoard(this.boardId);\n      }\n    });\n\n    this.socketService\n      .listen<ColumnInterface>(SocketEventsEnum.columnsCreateSuccess)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((column) => {\n        this.boardService.addColumn(column);\n      });\n\n    this.socketService\n      .listen<string>(SocketEventsEnum.columnsDeleteSuccess)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((columnId) => {\n        this.boardService.deleteColumn(columnId);\n      });\n\n    this.socketService\n      .listen<TaskInterface>(SocketEventsEnum.tasksCreateSuccess)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((task) => {\n        this.boardService.addTask(task);\n      });\n\n    this.socketService\n      .listen<BoardInterface>(SocketEventsEnum.boardsUpdateSuccess)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((updatedBoard) => {\n        this.boardService.updateBoard(updatedBoard);\n      });\n\n    this.socketService\n      .listen<ColumnInterface>(SocketEventsEnum.columnsUpdateSuccess)\n      //.pipe(takeUntil(this.unsubscribe$))\n      .subscribe((updatedColumn) => {\n        \n        this.boardService.updateColumn(updatedColumn);\n      });\n\n    this.socketService\n      .listen<void>(SocketEventsEnum.boardsDeleteSuccess)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(() => {\n        this.router.navigateByUrl('/boards');\n      });\n  }\n\n  fetchData(): void {\n    this.boardsService.getBoard(this.boardId).subscribe((board) => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe((columns) => {\n      this.boardService.setColumns(columns);\n    });\n    this.tasksService.getTasks(this.boardId).subscribe((tasks) => {\n      this.boardService.setTasks(tasks);\n    });\n  }\n\n  createColumn(title: string): void {\n    const columnInput: ColumnInputInterface = {\n      title,\n      boardId: this.boardId,\n    };\n    this.columnsService.createColumn(columnInput);\n  }\n\n  createTask(title: string, columnId: string): void {\n    const taskInput: TaskInputInterface = {\n      title,\n      boardId: this.boardId,\n      columnId,\n    };\n    this.tasksService.createTask(taskInput);\n  }\n\n  getTasksByColumn(columnId: string, tasks: TaskInterface[]): TaskInterface[] {\n    return tasks.filter((task) => task.columnId === columnId);\n  }\n\n  updateBoardName(boardName: string): void {\n    this.boardsService.updateBoard(this.boardId, { title: boardName });\n  }\n\n  deleteBoard(): void {\n    if (confirm('Are you sure you want to delete the board?')) {\n      this.boardsService.deleteBoard(this.boardId);\n    }\n  }\n\n  deleteColumn(columnId: string): void {\n    this.columnsService.deleteColumn(this.boardId, columnId);\n  }\n\n  updateColumnName(columnName: string, columnId: string): void {\n    this.columnsService.updateColumn(this.boardId, columnId, {\n      title: columnName,\n    });\n  }\n}","<app-topbar></app-topbar>\n\n<div class=\"board\" *ngIf=\"data$ | async as data\">\n  <div class=\"board-header-container\">\n    <inline-form\n      class=\"edit-board-form\"\n      [defaultText]=\"data.board.title\"\n      [title]=\"data.board.title\"\n      (handleSubmit)=\"updateBoardName($event)\"\n    ></inline-form>\n    <div class=\"delete-board\" (click)=\"deleteBoard()\">Delete board</div>\n  </div>\n  <div class=\"columns\">\n    <div class=\"column\" *ngFor=\"let column of data.columns\">\n      <div class=\"column-title\">\n        <inline-form\n          class=\"edit-column-form\"\n          [defaultText]=\"column.title\"\n          [title]=\"column.title\"\n          (handleSubmit)=\"updateColumnName($event, column.id)\"\n        ></inline-form>\n        <img\n          src=\"/assets/close_icon.svg\"\n          class=\"column-delete-icon\"\n          (click)=\"deleteColumn(column.id)\"\n        />\n      </div>\n      <div\n        *ngFor=\"let task of getTasksByColumn(column.id, data.tasks)\"\n        class=\"task\"\n      >\n        {{ task.title }}\n      </div>\n      <inline-form\n        class=\"create-task-form\"\n        defaultText=\"Add a card\"\n        [hasButton]=\"true\"\n        buttonText=\"Add card\"\n        inputPlaceholder=\"Enter a title for this card\"\n        (handleSubmit)=\"createTask($event, column.id)\"\n      ></inline-form>\n    </div>\n    <inline-form\n      class=\"create-column-form\"\n      defaultText=\"Add a list\"\n      [hasButton]=\"true\"\n      buttonText=\"Add list\"\n      inputPlaceholder=\"Add column name\"\n      (handleSubmit)=\"createColumn($event)\"\n    ></inline-form>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module"}