{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { combineLatest, filter, map } from 'rxjs';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/boards.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/board.service\";\nimport * as i4 from \"src/app/shared/services/socket.service\";\nimport * as i5 from \"../../../shared/services/columns.service\";\nimport * as i6 from \"@angular/common\";\nexport class BoardComponent {\n  constructor(boardsService, route, router, boardService, socketService, columnsService) {\n    this.boardsService = boardsService;\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.socketService = socketService;\n    this.columnsService = columnsService;\n    this.columns$ = this.boardService.columns$;\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([this.boardService.board$.pipe(filter(Boolean)), this.boardService.columns$]).pipe(map(([board, columns]) => ({\n      board,\n      columns\n    })));\n  }\n\n  ngOnInit() {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, {\n      boardId: this.boardId\n    });\n    this.fetchData();\n    this.initializeListeners();\n  }\n\n  initializeListeners() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    });\n  }\n\n  fetchData() {\n    this.boardsService.getBoard(this.boardId).subscribe(board => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe(columns => {\n      this.boardService.setColumns(columns);\n    });\n  }\n\n  test() {\n    this.socketService.emit('columns:create', {\n      boardId: this.boardId,\n      title: 'foobs'\n    });\n  }\n\n}\n\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.BoardsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.BoardService), i0.ɵɵdirectiveInject(i4.SocketService), i0.ɵɵdirectiveInject(i5.ColumnsService));\n};\n\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"board\"]],\n  decls: 5,\n  vars: 5,\n  consts: [[3, \"click\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0);\n      i0.ɵɵpipe(1, \"json\");\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementStart(3, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function BoardComponent_Template_button_click_3_listener() {\n        return ctx.test();\n      });\n      i0.ɵɵtext(4, \"Add Board\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵtextInterpolate1(\"Board\\n\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind1(2, 3, ctx.board$)), \" \");\n    }\n  },\n  dependencies: [i6.AsyncPipe, i6.JsonPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAyBA,eAAzB,QAAwD,iBAAxD;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,GAAhC,QAAuD,MAAvD;AAKA,SAASC,gBAAT,QAAiC,wCAAjC;;;;;;;;AAQA,OAAM,MAAOC,cAAP,CAAqB;EASzBC,YACUC,aADV,EAEUC,KAFV,EAGUC,MAHV,EAIUC,YAJV,EAKUC,aALV,EAMUC,cANV,EAMwC;IAL9B;IACA;IACA;IACA;IACA;IACA;IAZV,gBAA0C,KAAKF,YAAL,CAAkBG,QAA5D;IAcE,MAAMC,OAAO,GAAG,KAAKN,KAAL,CAAWO,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,SAAjC,CAAhB;;IAEA,IAAI,CAACH,OAAL,EAAc;MACZ,MAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;IACD;;IAED,KAAKJ,OAAL,GAAeA,OAAf;IACA,KAAKK,KAAL,GAAalB,aAAa,CAAC,CACzB,KAAKS,YAAL,CAAkBU,MAAlB,CAAyBC,IAAzB,CAA8BnB,MAAM,CAACoB,OAAD,CAApC,CADyB,EAEzB,KAAKZ,YAAL,CAAkBG,QAFO,CAAD,CAAb,CAGVQ,IAHU,CAGLlB,GAAG,CAAC,CAAC,CAACoB,KAAD,EAAQC,OAAR,CAAD,MAAuB;MACjCD,KADiC;MAEjCC;IAFiC,CAAvB,CAAD,CAHE,CAAb;EAMD;;EAEDC,QAAQ;IACN,KAAKd,aAAL,CAAmBe,IAAnB,CAAwBtB,gBAAgB,CAACuB,UAAzC,EAAqD;MACnDb,OAAO,EAAE,KAAKA;IADqC,CAArD;IAGA,KAAKc,SAAL;IACA,KAAKC,mBAAL;EACD;;EAEDA,mBAAmB;IACjB,KAAKpB,MAAL,CAAYqB,MAAZ,CAAmBC,SAAnB,CAA6BC,KAAK,IAAG;MACnC,IAAIA,KAAK,YAAYhC,eAArB,EAAsC;QACpCiC,OAAO,CAACC,GAAR,CAAY,gBAAZ;QACA,KAAKxB,YAAL,CAAkByB,UAAlB,CAA6B,KAAKrB,OAAlC;MACD;IACF,CALD;EAMD;;EAEDc,SAAS;IACP,KAAKrB,aAAL,CAAmB6B,QAAnB,CAA4B,KAAKtB,OAAjC,EAA0CiB,SAA1C,CAAqDR,KAAD,IAAU;MAC5D,KAAKb,YAAL,CAAkB2B,QAAlB,CAA2Bd,KAA3B;IACD,CAFD;IAGA,KAAKX,cAAL,CAAoB0B,UAApB,CAA+B,KAAKxB,OAApC,EAA6CiB,SAA7C,CAAwDP,OAAD,IAAY;MACjE,KAAKd,YAAL,CAAkB6B,UAAlB,CAA6Bf,OAA7B;IACD,CAFD;EAID;;EAEDgB,IAAI;IACF,KAAK7B,aAAL,CAAmBe,IAAnB,CAAwB,gBAAxB,EAA0C;MACxCZ,OAAO,EAAE,KAAKA,OAD0B;MAExC2B,KAAK,EAAE;IAFiC,CAA1C;EAID;;AAhEwB;;;mBAAdpC,gBAAcqC;AAAA;;;QAAdrC;EAAcsC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCf3BL;;;MAGAA;MAAQA;QAAA,OAASM,UAAT;MAAe,CAAf;MAAiBN;MAASA;;;;MAHlCA","names":["NavigationStart","combineLatest","filter","map","SocketEventsEnum","BoardComponent","constructor","boardsService","route","router","boardService","socketService","columnsService","columns$","boardId","snapshot","paramMap","get","Error","data$","board$","pipe","Boolean","board","columns","ngOnInit","emit","boardsJoin","fetchData","initializeListeners","events","subscribe","event","console","log","leaveBoard","getBoard","setBoard","getColumns","setColumns","test","title","i0","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/board/board.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationStart, Router } from '@angular/router';\nimport { combineLatest, filter, map, Observable } from 'rxjs';\nimport { BoardsService } from 'src/app/shared/services/boards.service';\nimport { BoardInterface } from 'src/app/shared/types/board.interface';\nimport { BoardService } from '../../services/board.service';\nimport { SocketService } from 'src/app/shared/services/socket.service';\nimport { SocketEventsEnum } from 'src/app/shared/types/socketEvents.enum';\nimport { ColumnInterface } from '../../../shared/types/column.interface';\nimport { ColumnsService } from '../../../shared/services/columns.service';\n\n@Component({\n  selector: 'board',\n  templateUrl: './board.component.html',\n})\nexport class BoardComponent implements OnInit {\n  boardId: string;\n  board$: Observable<BoardInterface>;\n  columns$: Observable<ColumnInterface[]> = this.boardService.columns$;\n  data$: Observable<{ \n    board: BoardInterface, \n    columns: ColumnInterface[] \n  }>;\n\n  constructor(\n    private boardsService: BoardsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private boardService: BoardService,\n    private socketService: SocketService,\n    private columnsService: ColumnsService,\n  ) {\n    const boardId = this.route.snapshot.paramMap.get('boardId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    this.boardId = boardId;\n    this.data$ = combineLatest([\n      this.boardService.board$.pipe(filter(Boolean)),\n      this.boardService.columns$\n    ]).pipe(map(([board, columns]) => ({ \n      board, \n      columns })));\n  }\n\n  ngOnInit(): void {\n    this.socketService.emit(SocketEventsEnum.boardsJoin, { \n      boardId: this.boardId \n    });\n    this.fetchData();\n    this.initializeListeners()\n  }\n\n  initializeListeners(): void {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        console.log('leaving a page');\n        this.boardService.leaveBoard(this.boardId);\n      }\n    })\n  }\n\n  fetchData(): void {\n    this.boardsService.getBoard(this.boardId).subscribe((board) => {\n      this.boardService.setBoard(board);\n    });\n    this.columnsService.getColumns(this.boardId).subscribe((columns) => {\n      this.boardService.setColumns(columns);\n    })\n\n  }\n\n  test(): void {\n    this.socketService.emit('columns:create', {\n      boardId: this.boardId, \n      title: 'foobs',\n    });\n  }\n}","Board\n{{board$ | async | json }}\n\n<button (click)=\"test()\">Add Board</button>"]},"metadata":{},"sourceType":"module"}