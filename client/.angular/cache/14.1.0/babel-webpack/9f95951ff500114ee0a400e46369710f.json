{"ast":null,"code":"import _asyncToGenerator from \"/home/ct/Documents/fullstack-trello-clone/eltrello/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Schema, model } from \"mongoose\";\nimport validator from \"validator\";\nimport bcryptjs from \"bcryptjs\";\nconst userSchema = new Schema({\n  email: {\n    type: String,\n    required: [true, \"Email is required\"],\n    validate: [validator.isEmail, \"invalid email\"],\n    createIndexes: {\n      unique: true\n    }\n  },\n  username: {\n    type: String,\n    required: [true, \"Username is required\"]\n  },\n  password: {\n    type: String,\n    required: [true, \"Password is required\"],\n    select: false\n  }\n}, {\n  timestamps: true\n});\nuserSchema.pre(\"save\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (next) {\n    if (!this.isModified(\"password\")) {\n      return next();\n    }\n\n    try {\n      const salt = yield bcryptjs.genSalt(10);\n      this.password = yield bcryptjs.hash(this.password, salt);\n      return next();\n    } catch (err) {\n      return next(err);\n    }\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nuserSchema.methods.validatePassword = function (password) {\n  console.log(\"validatePassword\", password, this);\n  return bcryptjs.compare(password, this.password);\n};\n\nexport default model(\"User\", userSchema);","map":{"version":3,"mappings":";AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,UAA9B;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,UAAU,GAAG,IAAIJ,MAAJ,CACjB;EACEK,KAAK,EAAE;IACLC,IAAI,EAAEC,MADD;IAELC,QAAQ,EAAE,CAAC,IAAD,EAAO,mBAAP,CAFL;IAGLC,QAAQ,EAAE,CAACP,SAAS,CAACQ,OAAX,EAAoB,eAApB,CAHL;IAILC,aAAa,EAAE;MAAEC,MAAM,EAAE;IAAV;EAJV,CADT;EAOEC,QAAQ,EAAE;IACRP,IAAI,EAAEC,MADE;IAERC,QAAQ,EAAE,CAAC,IAAD,EAAO,sBAAP;EAFF,CAPZ;EAWEM,QAAQ,EAAE;IACRR,IAAI,EAAEC,MADE;IAERC,QAAQ,EAAE,CAAC,IAAD,EAAO,sBAAP,CAFF;IAGRO,MAAM,EAAE;EAHA;AAXZ,CADiB,EAkBjB;EACEC,UAAU,EAAE;AADd,CAlBiB,CAAnB;AAuBAZ,UAAU,CAACa,GAAX,CAAe,MAAf;EAAA,6BAAuB,WAAgBC,IAAhB,EAAoB;IACzC,IAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;MAChC,OAAOD,IAAI,EAAX;IACD;;IAED,IAAI;MACF,MAAME,IAAI,SAASjB,QAAQ,CAACkB,OAAT,CAAiB,EAAjB,CAAnB;MACA,KAAKP,QAAL,SAAsBX,QAAQ,CAACmB,IAAT,CAAc,KAAKR,QAAnB,EAA6BM,IAA7B,CAAtB;MACA,OAAOF,IAAI,EAAX;IACD,CAJD,CAIE,OAAOK,GAAP,EAAY;MACZ,OAAOL,IAAI,CAACK,GAAD,CAAX;IACD;EACF,CAZD;;EAAA;IAAA;EAAA;AAAA;;AAcAnB,UAAU,CAACoB,OAAX,CAAmBC,gBAAnB,GAAsC,UAAUX,QAAV,EAA0B;EAC9DY,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCb,QAAhC,EAA0C,IAA1C;EACA,OAAOX,QAAQ,CAACyB,OAAT,CAAiBd,QAAjB,EAA2B,KAAKA,QAAhC,CAAP;AACD,CAHD;;AAKA,eAAeb,KAAK,CAAe,MAAf,EAAuBG,UAAvB,CAApB","names":["Schema","model","validator","bcryptjs","userSchema","email","type","String","required","validate","isEmail","createIndexes","unique","username","password","select","timestamps","pre","next","isModified","salt","genSalt","hash","err","methods","validatePassword","console","log","compare"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/server/src/models/user.ts"],"sourcesContent":["import { Schema, model } from \"mongoose\";\nimport { UserDocument } from \"../types/user.interface\";\nimport validator from \"validator\";\nimport bcryptjs from \"bcryptjs\";\n\nconst userSchema = new Schema<UserDocument>(\n  {\n    email: {\n      type: String,\n      required: [true, \"Email is required\"],\n      validate: [validator.isEmail, \"invalid email\"],\n      createIndexes: { unique: true },\n    },\n    username: {\n      type: String,\n      required: [true, \"Username is required\"],\n    },\n    password: {\n      type: String,\n      required: [true, \"Password is required\"],\n      select: false,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) {\n    return next();\n  }\n\n  try {\n    const salt = await bcryptjs.genSalt(10);\n    this.password = await bcryptjs.hash(this.password, salt);\n    return next();\n  } catch (err) {\n    return next(err as Error);\n  }\n});\n\nuserSchema.methods.validatePassword = function (password: string) {\n  console.log(\"validatePassword\", password, this);\n  return bcryptjs.compare(password, this.password);\n};\n\nexport default model<UserDocument>(\"User\", userSchema);"]},"metadata":{},"sourceType":"module"}