{"ast":null,"code":"import _asyncToGenerator from \"/home/ct/Documents/fullstack-trello-clone/eltrello/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport UserModel from \"../models/user\";\nimport { Error } from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport { secret } from \"../config\";\n\nconst normalizeUser = user => {\n  const token = jwt.sign({\n    id: user.id,\n    email: user.email\n  }, secret);\n  return {\n    email: user.email,\n    username: user.username,\n    id: user.id,\n    token\n  };\n};\n\nexport const register = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (req, res, next) {\n    try {\n      const newUser = new UserModel({\n        email: req.body.email,\n        username: req.body.username,\n        password: req.body.password\n      });\n      const savedUser = yield newUser.save();\n      res.send(normalizeUser(savedUser));\n    } catch (err) {\n      if (err instanceof Error.ValidationError) {\n        const messages = Object.values(err.errors).map(err => err.message);\n        return res.status(422).json(messages);\n      }\n\n      next(err);\n    }\n  });\n\n  return function register(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const login = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (req, res, next) {\n    try {\n      const user = yield UserModel.findOne({\n        email: req.body.email\n      }).select(\"+password\");\n      const errors = {\n        emailOrPassword: \"Incorrect email or password\"\n      };\n\n      if (!user) {\n        return res.status(422).json(errors);\n      }\n\n      const isSamePassword = yield user.validatePassword(req.body.password);\n\n      if (!isSamePassword) {\n        return res.status(422).json(errors);\n      }\n\n      res.send(normalizeUser(user));\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  return function login(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport const currentUser = (req, res) => {\n  if (!req.user) {\n    return res.sendStatus(401);\n  }\n\n  res.send(normalizeUser(req.user));\n};","map":{"version":3,"mappings":"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","names":["UserModel","Error","jwt","secret","normalizeUser","user","token","sign","id","email","username","register","req","res","next","newUser","body","password","savedUser","save","send","err","ValidationError","messages","Object","values","errors","map","message","status","json","login","findOne","select","emailOrPassword","isSamePassword","validatePassword","currentUser","sendStatus"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/server/src/controllers/users.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport UserModel from \"../models/user\";\nimport { UserDocument } from \"../types/user.interface\";\nimport { Error } from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport { secret } from \"../config\";\nimport { ExpressRequestInterface } from \"../types/expressRequest.interface\";\n\nconst normalizeUser = (user: UserDocument) => {\n  const token = jwt.sign({ id: user.id, email: user.email }, secret);\n  return {\n    email: user.email,\n    username: user.username,\n    id: user.id,\n    token,\n  };\n};\n\nexport const register = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const newUser = new UserModel({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n    });\n    const savedUser = await newUser.save();\n    res.send(normalizeUser(savedUser));\n  } catch (err) {\n    if (err instanceof Error.ValidationError) {\n      const messages = Object.values(err.errors).map((err) => err.message);\n      return res.status(422).json(messages);\n    }\n    next(err);\n  }\n};\n\nexport const login = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const user = await UserModel.findOne({ email: req.body.email }).select(\n      \"+password\"\n    );\n    const errors = { emailOrPassword: \"Incorrect email or password\" };\n\n    if (!user) {\n      return res.status(422).json(errors);\n    }\n\n    const isSamePassword = await user.validatePassword(req.body.password);\n\n    if (!isSamePassword) {\n      return res.status(422).json(errors);\n    }\n\n    res.send(normalizeUser(user));\n  } catch (err) {\n    next(err);\n  }\n};\n\nexport const currentUser = (req: ExpressRequestInterface, res: Response) => {\n  if (!req.user) {\n    return res.sendStatus(401);\n  }\n  res.send(normalizeUser(req.user));\n};"]},"metadata":{},"sourceType":"module"}