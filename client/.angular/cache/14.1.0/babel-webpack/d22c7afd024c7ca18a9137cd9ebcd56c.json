{"ast":null,"code":"import { map, filter, combineLatest } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/board.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../shared/modules/inlineForm/components/inlineForm/inlineForm.component\";\nexport class TaskModalComponent {\n  constructor(route, router, boardService) {\n    this.route = route;\n    this.router = router;\n    this.boardService = boardService;\n    this.classes = 'task-modal';\n    const boardId = this.route.parent?.snapshot.paramMap.get('boardId');\n    const taskId = this.route.snapshot.paramMap.get('taskId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n\n    if (!taskId) {\n      throw new Error('Cant get taskID from url');\n    }\n\n    this.taskId = taskId;\n    this.boardId = boardId;\n    this.task$ = this.boardService.tasks$.pipe(map(tasks => {\n      return tasks.find(task => task.id === this.taskId);\n    }), filter(Boolean));\n    this.data$ = combineLatest([this.task$]).pipe(map(([task]) => ({\n      task\n    })));\n  }\n\n  goToBoard() {\n    this.router.navigate(['boards', this.boardId]);\n  }\n\n}\n\nTaskModalComponent.ɵfac = function TaskModalComponent_Factory(t) {\n  return new (t || TaskModalComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.BoardService));\n};\n\nTaskModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskModalComponent,\n  selectors: [[\"task-modal\"]],\n  hostVars: 2,\n  hostBindings: function TaskModalComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.classes);\n    }\n  },\n  decls: 20,\n  vars: 1,\n  consts: [[\"ngIf\", \"data$ | async as\", 1, \"task-modal-container\"], [1, \"task-modal-header\"], [1, \"task-modal-edit-title-form\", 3, \"defaultText\"], [\"src\", \"/assets/close_icon.svg\", 1, \"task-modal-close\", 3, \"click\"], [1, \"task-modal-body\"], [1, \"column-select-container\"], [1, \"task-modal-description\"], [1, \"task-modal-description-label\"], [1, \"task-modal-actions\"], [1, \"task-modal-actions-label\"], [1, \"task-modal-actions-action\"], [\"src\", \"/assets/trash.svg\", 1, \"task-modal-actions-icon\"], [1, \"task-modal-backdrop\"]],\n  template: function TaskModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"inline-form\", 2);\n      i0.ɵɵelementStart(3, \"img\", 3);\n      i0.ɵɵlistener(\"click\", function TaskModalComponent_Template_img_click_3_listener() {\n        return ctx.goToBoard();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\")(6, \"form\", 5);\n      i0.ɵɵtext(7, \"SELECT COLUMN\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6)(9, \"div\", 7);\n      i0.ɵɵtext(10, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \" INLINE FORM DESCRIPTION \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\", 9);\n      i0.ɵɵtext(14, \"Actions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\")(16, \"div\", 10);\n      i0.ɵɵelement(17, \"img\", 11);\n      i0.ɵɵtext(18, \" Delete \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelement(19, \"div\", 12);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"defaultText\", ctx.title);\n    }\n  },\n  dependencies: [i3.NgIf, i4.InlineFormComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAT,EAAyBC,MAAzB,EAAiCC,aAAjC,QAAsD,MAAtD;;;;;;AAQA,OAAM,MAAOC,kBAAP,CAAyB;EAQ7BC,YAAoBC,KAApB,EAAmDC,MAAnD,EAA2EC,YAA3E,EAAqG;IAAjF;IAA+B;IAAwB;IAPrD,eAAU,YAAV;IAQpB,MAAMC,OAAO,GAAG,KAAKH,KAAL,CAAWI,MAAX,EAAmBC,QAAnB,CAA4BC,QAA5B,CAAqCC,GAArC,CAAyC,SAAzC,CAAhB;IACA,MAAMC,MAAM,GAAG,KAAKR,KAAL,CAAWK,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,QAAjC,CAAf;;IAEA,IAAI,CAACJ,OAAL,EAAc;MACZ,MAAM,IAAIM,KAAJ,CAAU,2BAAV,CAAN;IACD;;IACD,IAAI,CAACD,MAAL,EAAa;MACX,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;IACD;;IAED,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKL,OAAL,GAAeA,OAAf;IACA,KAAKO,KAAL,GAAa,KAAKR,YAAL,CAAkBS,MAAlB,CAAyBC,IAAzB,CACXjB,GAAG,CAAEkB,KAAD,IAAU;MACZ,OAAOA,KAAK,CAACC,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAY,KAAKR,MAAtC,CAAP;IACD,CAFE,CADQ,EAIXZ,MAAM,CAACqB,OAAD,CAJK,CAAb;IAMA,KAAKC,KAAL,GAAarB,aAAa,CAAC,CAAC,KAAKa,KAAN,CAAD,CAAb,CAA4BE,IAA5B,CACXjB,GAAG,CAAC,CAAC,CAACoB,IAAD,CAAD,MAAa;MACjBA;IADiB,CAAb,CAAD,CADQ,CAAb;EAKD;;EAGHI,SAAS;IACP,KAAKlB,MAAL,CAAYmB,QAAZ,CAAqB,CAAC,QAAD,EAAW,KAAKjB,OAAhB,CAArB;EACD;;AArC8B;;;mBAAlBL,oBAAkBuB;AAAA;;;QAAlBvB;EAAkBwB;EAAAC;EAAAC;IAAA;;;;;;;;;MCV/BH,+BAA0D,CAA1D,EAA0D,KAA1D,EAA0D,CAA1D;MAEIA;MAIAA;MAGEA;QAAA,OAASI,eAAT;MAAoB,CAApB;MAHFJ;MAMFA,+BAA6B,CAA7B,EAA6B,KAA7B,EAA6B,CAA7B,EAA6B,MAA7B,EAA6B,CAA7B;MAE0CA;MAAaA;MACnDA,+BAAoC,CAApC,EAAoC,KAApC,EAAoC,CAApC;MAC4CA;MAAWA;MACrDA;MACFA;MAEFA,gCAAgC,EAAhC,EAAgC,KAAhC,EAAgC,CAAhC;MACwCA;MAAOA;MAC7CA,6BAAK,EAAL,EAAK,KAAL,EAAK,EAAL;MAEIA;MACAA;MACFA;MAKRA;;;;MA3BMA;MAAAA","names":["map","filter","combineLatest","TaskModalComponent","constructor","route","router","boardService","boardId","parent","snapshot","paramMap","get","taskId","Error","task$","tasks$","pipe","tasks","find","task","id","Boolean","data$","goToBoard","navigate","i0","selectors","hostVars","hostBindings","ctx"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/taskModal/taskModal.component.ts","/home/ct/Documents/fullstack-trello-clone/eltrello/client/src/app/board/components/taskModal/taskModal.component.html"],"sourcesContent":["import { Component, HostBinding } from \"@angular/core\";\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, Observable,filter, combineLatest } from \"rxjs\";\nimport { BoardService } from \"../../services/board.service\";\nimport { TaskInterface } from 'src/app/shared/types/task.interface';\n\n@Component({\n  selector: \"task-modal\",\n  templateUrl: \"./taskModal.component.html\",\n})\nexport class TaskModalComponent {\n  @HostBinding('class') classes = 'task-modal';\n\n  boardId: string;\n  taskId: string;\n  task$: Observable<TaskInterface>;\n  data$: Observable<{task: TaskInterface}>\n\n  constructor(private route: ActivatedRoute, private router: Router, private boardService: BoardService) {\n    const boardId = this.route.parent?.snapshot.paramMap.get('boardId');\n    const taskId = this.route.snapshot.paramMap.get('taskId');\n\n    if (!boardId) {\n      throw new Error('Cant get boardID from url');\n    }\n    if (!taskId) {\n      throw new Error('Cant get taskID from url');\n    }\n\n    this.taskId = taskId\n    this.boardId = boardId;\n    this.task$ = this.boardService.tasks$.pipe(\n      map((tasks) => {\n        return tasks.find((task) => task.id === this.taskId);\n      }),\n      filter(Boolean)\n    );\n    this.data$ = combineLatest([this.task$]).pipe(\n      map(([task]) => ({\n      task,\n    }))\n    );\n  }\n  \n\ngoToBoard(): void {\n  this.router.navigate(['boards', this.boardId]);\n}  \n}","<div class=\"task-modal-container\" ngIf=\"data$ | async as\">\n  <div class=\"task-modal-header\">\n    <inline-form \n      class=\"task-modal-edit-title-form\"\n      [defaultText]=\"title\"\n      ></inline-form>\n    <img\n      src=\"/assets/close_icon.svg\"\n      class=\"task-modal-close\"\n      (click)=\"goToBoard()\"\n    />\n  </div>\n  <div class=\"task-modal-body\">\n    <div>\n      <form class=\"column-select-container\">SELECT COLUMN</form>\n      <div class=\"task-modal-description\">\n        <div class=\"task-modal-description-label\">Description</div>\n        INLINE FORM DESCRIPTION\n      </div>\n    </div>\n    <div class=\"task-modal-actions\">\n      <div class=\"task-modal-actions-label\">Actions</div>\n      <div>\n        <div class=\"task-modal-actions-action\">\n          <img src=\"/assets/trash.svg\" class=\"task-modal-actions-icon\" />\n          Delete\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"task-modal-backdrop\"></div>"]},"metadata":{},"sourceType":"module"}