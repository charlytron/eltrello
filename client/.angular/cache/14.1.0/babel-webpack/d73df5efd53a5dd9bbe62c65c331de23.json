{"ast":null,"code":"import _asyncToGenerator from \"/home/ct/Documents/fullstack-trello-clone/eltrello/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport UserModel from '../models/user';\nimport { Error } from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport { secret } from '../config';\n\nconst normalizeUser = user => {\n  const token = jwt.sign({\n    id: user._id,\n    email: user.email\n  }, secret);\n  return {\n    email: user.email,\n    username: user.username,\n    id: user._id,\n    token\n  };\n};\n\nexport const register = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (req, res, next) {\n    try {\n      const newUser = new UserModel({\n        email: req.body.email,\n        username: req.body.username,\n        password: req.body.password\n      });\n      console.log('newUser', newUser);\n      const savedUser = yield newUser.save();\n      console.log('saved user', savedUser);\n      res.send(normalizeUser(savedUser));\n    } catch (err) {\n      if (err instanceof Error.ValidationError) {\n        const messages = Object.values(err.errors).map(err => err.message);\n        return res.status(422).json(messages);\n      }\n\n      next(err);\n    }\n  });\n\n  return function register(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const login = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (req, res, next) {\n    try {\n      const user = yield UserModel.findOne({\n        email: req.body.email\n      }).select('+password');\n      const errors = {\n        emailOrPassword: 'Email or password is incorrect'\n      };\n\n      if (!user) {\n        return res.status(422).json(errors);\n      }\n\n      const isSamePassword = yield user.validatePassword(req.body.password);\n\n      if (!isSamePassword) {\n        return res.status(422).json(errors);\n      }\n\n      res.send(normalizeUser(user));\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  return function login(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport const currentUser = (req, res) => {\n  if (!req.user) {\n    return res.sendStatus(401);\n  }\n\n  res.send(normalizeUser(req.user));\n};","map":{"version":3,"mappings":"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","names":["UserModel","Error","jwt","secret","normalizeUser","user","token","sign","id","_id","email","username","register","req","res","next","newUser","body","password","console","log","savedUser","save","send","err","ValidationError","messages","Object","values","errors","map","message","status","json","login","findOne","select","emailOrPassword","isSamePassword","validatePassword","currentUser","sendStatus"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/server/src/controllers/users.ts"],"sourcesContent":["import {NextFunction, Request, Response} from 'express';\nimport UserModel from '../models/user';\nimport {UserDocument} from '../types/user.interface';\nimport {Error} from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport { secret } from '../config';\nimport { ExpressRequestInterface } from '../types/expressRequest.interface';\n\nconst normalizeUser = (user: UserDocument) => {\n    const token = jwt.sign({id: user._id, email: user.email}, secret);\n    return {\n        email: user.email,\n        username: user.username,\n        id: user._id,\n        token,\n    }\n}\n\nexport const register = async (\n    req: Request, \n    res: Response, \n    next: NextFunction\n    ) => {\n        try {\n            const newUser = new UserModel({\n                email: req.body.email,\n                username: req.body.username,\n                password: req.body.password\n            })\n            console.log('newUser', newUser);\n            const savedUser = await newUser.save();\n            console.log('saved user', savedUser);\n            res.send(normalizeUser(savedUser));\n        } catch (err) {\n            if (err instanceof Error.ValidationError) {\n                const messages = Object.values(err.errors).map(err => err.message);\n                return res.status(422).json(messages)\n            }\n            next(err);\n        }\n    }\n\n    export const login = async (\n        req: Request,\n        res: Response,\n        next: NextFunction\n    ) => {\n        try {\n            const user = await UserModel.findOne({email: req.body.email}).select('+password');\n            const errors = { emailOrPassword: 'Email or password is incorrect' };\n            if (!user) {\n                return res.status(422).json(errors);\n            }\n\n            const isSamePassword = await user.validatePassword(req.body.password);\n\n            if (!isSamePassword) {\n                return res.status(422).json(errors);\n            }\n            \n            res.send(normalizeUser(user));\n        } catch (err) {\n            next(err);\n        }\n    }\n\n    export const currentUser = (req: ExpressRequestInterface, res: Response) => {\n        if(!req.user) {\n            return res.sendStatus(401)\n        }\n        res.send(normalizeUser(req.user));\n    }"]},"metadata":{},"sourceType":"module"}