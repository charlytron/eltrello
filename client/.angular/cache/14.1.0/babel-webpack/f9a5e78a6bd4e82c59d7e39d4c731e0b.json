{"ast":null,"code":"import _asyncToGenerator from \"/home/ct/Documents/fullstack-trello-clone/eltrello/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Schema, model } from \"mongoose\";\nimport validator from \"validator\";\nimport bcrypt from \"bcryptjs\";\nconst userSchema = new Schema({\n  email: {\n    type: String,\n    required: [true, \"Email is required\"],\n    validate: [validator.isEmail, \"Email is invalid\"],\n    createIndexes: {\n      unique: true\n    }\n  },\n  username: {\n    type: String,\n    required: [true, \"Username is required\"]\n  },\n  password: {\n    type: String,\n    required: [true, \"Password is required\"],\n    select: false\n  }\n}, {\n  timestamps: true\n});\nuserSchema.pre('save', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (next) {\n    if (!this.isModified('password')) {\n      return next();\n    }\n\n    try {\n      const salt = yield bcrypt.genSaltSync(10);\n      this.password = yield bcrypt.hash(this.password, salt);\n      return next();\n    } catch (err) {\n      return next(err);\n    }\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nuserSchema.methods.validatePassword = function (password) {\n  console.log('validatePassword', password);\n  return bcrypt.compare(password, this.password);\n};\n\nexport default model('User', userSchema);","map":{"version":3,"mappings":";AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,UAA9B;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,UAAU,GAAG,IAAIJ,MAAJ,CAAyB;EACxCK,KAAK,EAAE;IACHC,IAAI,EAAEC,MADH;IAEHC,QAAQ,EAAE,CAAC,IAAD,EAAO,mBAAP,CAFP;IAGHC,QAAQ,EAAE,CAACP,SAAS,CAACQ,OAAX,EAAoB,kBAApB,CAHP;IAIHC,aAAa,EAAE;MAAEC,MAAM,EAAE;IAAV;EAJZ,CADiC;EAOxCC,QAAQ,EAAE;IACNP,IAAI,EAAEC,MADA;IAENC,QAAQ,EAAE,CAAC,IAAD,EAAO,sBAAP;EAFJ,CAP8B;EAWxCM,QAAQ,EAAE;IACNR,IAAI,EAAEC,MADA;IAENC,QAAQ,EAAE,CAAC,IAAD,EAAO,sBAAP,CAFJ;IAGNO,MAAM,EAAE;EAHF;AAX8B,CAAzB,EAiBf;EACIC,UAAU,EAAE;AADhB,CAjBe,CAAnB;AAsBAZ,UAAU,CAACa,GAAX,CAAe,MAAf;EAAA,6BAAuB,WAAgBC,IAAhB,EAAoB;IACvC,IAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;MAC9B,OAAOD,IAAI,EAAX;IACH;;IAED,IAAI;MACF,MAAME,IAAI,SAASjB,MAAM,CAACkB,WAAP,CAAmB,EAAnB,CAAnB;MACA,KAAKP,QAAL,SAAsBX,MAAM,CAACmB,IAAP,CAAY,KAAKR,QAAjB,EAA2BM,IAA3B,CAAtB;MACA,OAAOF,IAAI,EAAX;IACD,CAJD,CAIE,OAAOK,GAAP,EAAY;MACV,OAAOL,IAAI,CAACK,GAAD,CAAX;IACH;EACJ,CAZD;;EAAA;IAAA;EAAA;AAAA;;AAcAnB,UAAU,CAACoB,OAAX,CAAmBC,gBAAnB,GAAsC,UAAUX,QAAV,EAA0B;EAC5DY,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCb,QAAhC;EACA,OAAOX,MAAM,CAACyB,OAAP,CAAed,QAAf,EAAyB,KAAKA,QAA9B,CAAP;AACH,CAHD;;AAKA,eAAeb,KAAK,CAAe,MAAf,EAAuBG,UAAvB,CAApB","names":["Schema","model","validator","bcrypt","userSchema","email","type","String","required","validate","isEmail","createIndexes","unique","username","password","select","timestamps","pre","next","isModified","salt","genSaltSync","hash","err","methods","validatePassword","console","log","compare"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/server/src/models/user.ts"],"sourcesContent":["import { Schema, model } from \"mongoose\"\nimport { UserDocument } from \"../types/user.interface\";\nimport validator from \"validator\";\nimport bcrypt from \"bcryptjs\";\n\nconst userSchema = new Schema<UserDocument>({\n    email: {\n        type: String,\n        required: [true, \"Email is required\"],\n        validate: [validator.isEmail, \"Email is invalid\"],\n        createIndexes: { unique: true }\n    },\n    username: {\n        type: String,\n        required: [true, \"Username is required\"],\n    },\n    password: {\n        type: String,\n        required: [true, \"Password is required\"],\n        select: false\n    },\n},\n    { \n        timestamps: true \n    }\n);\n\nuserSchema.pre('save', async function (next) {\n    if (!this.isModified('password')) {\n        return next();\n    }\n\n    try {\n      const salt = await bcrypt.genSaltSync(10);\n      this.password = await bcrypt.hash(this.password, salt);\n      return next();\n    } catch (err) {\n        return next(err as Error);\n    }\n});\n\nuserSchema.methods.validatePassword = function (password: string) {\n    console.log('validatePassword', password);\n    return bcrypt.compare(password, this.password);\n}\n\nexport default model<UserDocument>('User', userSchema);\n\n\n"]},"metadata":{},"sourceType":"module"}