{"ast":null,"code":"import _asyncToGenerator from \"/home/ct/Documents/fullstack-trello-clone/eltrello/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport ColumnModel from \"../models/column\";\nimport { SocketEventsEnum } from '../types/socketEvents.enum';\nimport { getErrorMessage } from \"../helpers\";\nexport const getColumns = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (req, res, next) {\n    try {\n      if (!req.user) {\n        return res.sendStatus(401);\n      }\n\n      const columns = yield ColumnModel.find({\n        boardId: req.params.boardId\n      });\n      res.send(columns);\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  return function getColumns(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const createColumn = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (io, socket, data) {\n    try {\n      if (!socket.user) {\n        socket.emit(SocketEventsEnum.columnsCreateFailure, \"User is not authorized\");\n        return;\n      }\n\n      const newColumn = new ColumnModel({\n        title: data.title,\n        boardId: data.boardId,\n        userId: socket.user.id\n      });\n      const savedColumn = yield newColumn.save();\n      io.to(data.boardId).emit(SocketEventsEnum.columnsCreateSuccess, savedColumn);\n      console.log(\"savedColumn\", savedColumn);\n    } catch (err) {\n      socket.emit(SocketEventsEnum.columnsCreateFailure, getErrorMessage(err));\n    }\n  });\n\n  return function createColumn(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"mappings":";AAEA,OAAOA,WAAP,MAAwB,kBAAxB;AAGA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,eAAT,QAAgC,YAAhC;AAEA,OAAO,MAAMC,UAAU;EAAA,6BAAG,WACxBC,GADwB,EAExBC,GAFwB,EAGxBC,IAHwB,EAIpB;IACJ,IAAI;MACA,IAAI,CAACF,GAAG,CAACG,IAAT,EAAe;QACX,OAAOF,GAAG,CAACG,UAAJ,CAAe,GAAf,CAAP;MACH;;MACD,MAAMC,OAAO,SAAST,WAAW,CAACU,IAAZ,CAAiB;QAAEC,OAAO,EAAEP,GAAG,CAACQ,MAAJ,CAAWD;MAAtB,CAAjB,CAAtB;MACAN,GAAG,CAACQ,IAAJ,CAASJ,OAAT;IAEH,CAPD,CAOE,OAAOK,GAAP,EAAY;MACVR,IAAI,CAACQ,GAAD,CAAJ;IACH;EACF,CAfsB;;EAAA,gBAAVX,UAAU;IAAA;EAAA;AAAA,GAAhB;AAiBP,OAAO,MAAMY,YAAY;EAAA,8BAAG,WAAOC,EAAP,EAAmBC,MAAnB,EAAmCC,IAAnC,EACtB;IACF,IAAI;MACF,IAAI,CAACD,MAAM,CAACV,IAAZ,EAAkB;QAChBU,MAAM,CAACE,IAAP,CAAYlB,gBAAgB,CAACmB,oBAA7B,EAAmD,wBAAnD;QACA;MACD;;MACD,MAAMC,SAAS,GAAG,IAAIrB,WAAJ,CAAgB;QAChCsB,KAAK,EAAEJ,IAAI,CAACI,KADoB;QAEhCX,OAAO,EAAEO,IAAI,CAACP,OAFkB;QAGhCY,MAAM,EAAEN,MAAM,CAACV,IAAP,CAAYiB;MAHY,CAAhB,CAAlB;MAKA,MAAMC,WAAW,SAASJ,SAAS,CAACK,IAAV,EAA1B;MACAV,EAAE,CAACW,EAAH,CAAMT,IAAI,CAACP,OAAX,EAAoBQ,IAApB,CACElB,gBAAgB,CAAC2B,oBADnB,EAEEH,WAFF;MAIAI,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,WAA3B;IACD,CAhBD,CAgBE,OAAOX,GAAP,EAAY;MACVG,MAAM,CAACE,IAAP,CAAYlB,gBAAgB,CAC9BmB,oBADE,EACoBlB,eAAe,CAACY,GAAD,CADnC;IAEP;EACE,CAtBsB;;EAAA,gBAAZC,YAAY;IAAA;EAAA;AAAA,GAAlB","names":["ColumnModel","SocketEventsEnum","getErrorMessage","getColumns","req","res","next","user","sendStatus","columns","find","boardId","params","send","err","createColumn","io","socket","data","emit","columnsCreateFailure","newColumn","title","userId","id","savedColumn","save","to","columnsCreateSuccess","console","log"],"sourceRoot":"","sources":["/home/ct/Documents/fullstack-trello-clone/eltrello/server/src/controllers/columns.ts"],"sourcesContent":["import { NextFunction, Response } from \"express\";\nimport { ExpressRequestInterface } from \"../types/expressRequest.interface\";\nimport ColumnModel from \"../models/column\";\nimport { Server } from 'socket.io';\nimport { Socket } from '../types/socket.interface';\nimport { SocketEventsEnum } from '../types/socketEvents.enum';\nimport { getErrorMessage } from \"../helpers\";\n\nexport const getColumns = async (\n  req: ExpressRequestInterface, \n  res: Response, \n  next: NextFunction\n  ) => {\n  try {\n      if (!req.user) {\n          return res.sendStatus(401);\n      }\n      const columns = await ColumnModel.find({ boardId: req.params.boardId });\n      res.send(columns);\n\n  } catch (err) {\n      next(err);\n  }\n}\n\nexport const createColumn = async (io: Server, socket: Socket, data: {boardId: string; title: string}\n  ) => {\n    try {\n      if (!socket.user) {\n        socket.emit(SocketEventsEnum.columnsCreateFailure, \"User is not authorized\");\n        return;\n      }\n      const newColumn = new ColumnModel({\n        title: data.title,\n        boardId: data.boardId,\n        userId: socket.user.id,\n      });\n      const savedColumn = await newColumn.save();\n      io.to(data.boardId).emit(\n        SocketEventsEnum.columnsCreateSuccess, \n        savedColumn\n        );\n      console.log(\"savedColumn\", savedColumn);\n    } catch (err) {\n        socket.emit(SocketEventsEnum.\n      columnsCreateFailure, getErrorMessage(err));\n}\n  }"]},"metadata":{},"sourceType":"module"}